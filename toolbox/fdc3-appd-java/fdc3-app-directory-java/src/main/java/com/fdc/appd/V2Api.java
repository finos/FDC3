/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.fdc.appd;

import com.fdc.appd.model.AllApplicationsResponse;
import com.fdc.appd.model.Application;
import com.fdc.appd.model.ErrorDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-10T19:40:14.622447+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Application", description = "the Application API")
public interface V2Api {

    default V2ApiDelegate getDelegate() {
        return new V2ApiDelegate() {};
    }

    /**
     * GET /v2/apps/{appId} : Retrieve an application definition
     *
     * @param appId  (required)
     * @return OK (status code 200)
     *         or Bad request. (status code 400)
     *         or Forbidden: Certificate authentication is not allowed for the requested user. (status code 403)
     *         or Server error, see response body for further details. (status code 500)
     */
    @Operation(
        operationId = "v2AppsAppIdGet",
        summary = "Retrieve an application definition",
        tags = { "Application" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Application.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = Application.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden: Certificate authentication is not allowed for the requested user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error, see response body for further details.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v2/apps/{appId}",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<Application> v2AppsAppIdGet(@RequestHeader(name="Authorization") String token,
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().v2AppsAppIdGet(appId,token);
    }


    /**
     * GET /v2/apps : Retrieve all application definitions
     *
     * @return OK (status code 200)
     *         or Bad request. (status code 400)
     *         or Forbidden: Certificate authentication is not allowed for the requested user. (status code 403)
     *         or Server error, see response body for further details. (status code 500)
     */
    @Operation(
        operationId = "v2AppsGet",
        summary = "Retrieve all application definitions",
        tags = { "Application" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AllApplicationsResponse.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = AllApplicationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden: Certificate authentication is not allowed for the requested user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error, see response body for further details.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDTO.class)),
                @Content(mediaType = "*/*", schema = @Schema(implementation = ErrorDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v2/apps",
        produces = { "application/json", "*/*" }
    )
    
    default ResponseEntity<AllApplicationsResponse> v2AppsGet(@RequestHeader(name="Authorization") String token
        
    ) {
        return getDelegate().v2AppsGet(token);
    }

}
